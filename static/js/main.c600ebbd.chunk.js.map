{"version":3,"sources":["InitialBoardData.js","useGameLogic.js","PlayableSpace/PlayableSpace.js","Piece/Piece.js","Cell/Cell.js","Row/Row.js","Board/Board.js","StartScreen/StartScreen.js","ScoreBoard/ScoreBoard.js","GameOver/GameOver.js","Sidebar/SideBar.js","App/App.js","index.js"],"names":["makeInitialBoard","initialBoardData","Array","from","fill","id","y","x","color","useGameLogic","useState","isGameStarted","setIsGameStarted","alertMsg","setAlertMsg","board","setBoard","isGameOver","setIsGameOver","connections","setConnections","playersWhoCantMove","setPlayersWhoCantMove","blacksTurn","setBlacksTurn","captures","pieces","player1","setPlayer1","player2","setPlayer2","checkForGameOver","Object","keys","length","prevState","console","log","showPlayableSquaresForOnePiece","piece","opposingColor","offsetX","offsetY","currentX","currentY","gatherConnectionsOfOpponentPieces","chain","adjacentSquare","push","showNewPieceOnBoard","row","square","clearPlayableMarkers","flipPieces","piecesToFlip","changePieceColor","countCaptures","flippedPieces","activeSetter","numOfCaptures","prevPlayer","addPieceToPlayersPieces","setPlayerFn","changePieceOwnership","passiveSetter","remainingPieces","multiFilter","remaining","valuesToRemove","lastIndex","filter","item","slice","active","newPiece","clearedBoard","boardCopy","connectionsCopy","assign","forEach","PlayableSpace","handlePlacingPiece","class","style","borderColor","onClick","Piece","props","backgroundColor","Cell","displayCellStatus","Row","cellData","map","cell","key","generateCells","Board","index","StartScreen","timedGame","startGame","handleInputChange","href","target","ScoreBoard","className","GameOver","resetGame","calculateAvgCaptures","player","reduce","a","b","toFixed","findLargestCapture","Math","max","declareWinner","SideBar","displaySideBarContent","App","showAllPlayableSquaresOnTurn","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c600ebbd.chunk.js","sourcesContent":["/**\n * The board is initialized to a 2D array.\n * Each cell is respresented by an object with the format {id, x, y, color};\n */\n\nconst makeInitialBoard = () => {\n  const BOARD_SIZE = 8;\n\n  const initialBoardData = Array.from(Array(BOARD_SIZE), () =>\n    new Array(BOARD_SIZE).fill(null)\n  );\n\n  let id = 0;\n\n  for (let y = 0; y < BOARD_SIZE; y++) {\n    for (let x = 0; x < BOARD_SIZE; x++) {\n      //for central squares, place inital white and black pieces\n      if ((x === 3 && y === 3) || (x === 4 && y === 4)) {\n        initialBoardData[y][x] = { id, x, y, color: \"b\" };\n      } else if ((x === 3 && y === 4) || (x === 4 && y === 3)) {\n        initialBoardData[y][x] = { id, x, y, color: \"w\" };\n      }\n      //make all other squares empty\n      else {\n        initialBoardData[y][x] = { id, x, y, color: null };\n      }\n      id++;\n    }\n  }\n  return initialBoardData;\n};\n\nexport default makeInitialBoard;\n","import makeInitialBoard from \"./InitialBoardData\";\nimport { useState } from \"react\";\n\nexport const useGameLogic = () => {\n\n  /* State */\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const [alertMsg, setAlertMsg] = useState(\"\");\n  const [board, setBoard] = useState(makeInitialBoard());\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [connections, setConnections] = useState({});\n  const [playersWhoCantMove, setPlayersWhoCantMove] = useState(0);\n  const [blacksTurn, setBlacksTurn] = useState(true);\n  const [player1, setPlayer1] = useState({\n    captures: [],\n    pieces: [\n      { id: 36, x: 4, y: 4, color: \"b\" },\n      { id: 27, x: 3, y: 3, color: \"b\" },\n    ],\n  });\n  const [player2, setPlayer2] = useState({\n    captures: [],\n    pieces: [\n      { id: 35, x: 3, y: 4, color: \"w\" },\n      { id: 28, x: 4, y: 3, color: \"w\" },\n    ],\n  });\n\n  /* Game flow functions*/\n  const startGame = () => {\n    setIsGameStarted(true);\n  };\n\n  const changeTurn = () => {\n    setAlertMsg(\"\");\n    setPlayersWhoCantMove(0);\n    setConnections({});\n\n    setBlacksTurn(!blacksTurn);\n  };\n\n  const checkForGameOver = (\n    connections,\n    playersWhoCantMove,\n    setPlayersWhoCantMove\n  ) => {\n    //if player has no moves change player\n    const clickableSquares = Object.keys(connections);\n    if (!clickableSquares.length) {\n      setPlayersWhoCantMove((prevState) => prevState + 1);\n      if (playersWhoCantMove === 2) {\n        console.log(\"gameOver\");\n        setIsGameOver(true);\n      } else {\n        console.log(\"turn change\");\n        setAlertMsg(\"Turn skipped: no moves\");\n        setBlacksTurn(!blacksTurn);\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setConnections({});\n    setAlertMsg(\"\");\n    setPlayersWhoCantMove(0);\n    setBoard(makeInitialBoard());\n    setPlayer1((prevPlayer) => ({\n      captures: [],\n      pieces: [\n        { id: 36, x: 4, y: 4, color: \"b\" },\n        { id: 27, x: 3, y: 3, color: \"b\" },\n      ],\n    }));\n    setPlayer2((prevPlayer) => ({\n      captures: [],\n      pieces: [\n        { id: 35, x: 3, y: 4, color: \"w\" },\n        { id: 28, x: 4, y: 3, color: \"w\" },\n      ],\n    }));\n    setIsGameOver(false);\n    setIsGameStarted(false);\n  };\n\n  /* Main Game Play*/\n  const showAllPlayableSquaresOnTurn = () => {\n    const boardCopy = [...board];\n    const connectionsCopy = Object.assign({}, connections);\n\n    if (blacksTurn) {\n      player1.pieces.forEach((piece) =>\n        showPlayableSquaresForOnePiece(boardCopy, piece, connectionsCopy)\n      );\n    } else {\n      player2.pieces.forEach((piece) =>\n        showPlayableSquaresForOnePiece(boardCopy, piece, connectionsCopy)\n      );\n    }\n    checkForGameOver(\n      connectionsCopy,\n      playersWhoCantMove,\n      setPlayersWhoCantMove\n    );\n\n    setBoard(boardCopy);\n    setConnections(connectionsCopy);\n  };\n\n  const handlePlacingPiece = (id, active) => {\n    const newPiece = showNewPieceOnBoard(id, [...board]);\n    if (active === \"black\") {\n      addPieceToPlayersPieces(newPiece, setPlayer1);\n    } else {\n      addPieceToPlayersPieces(newPiece, setPlayer2);\n    }\n\n    const flippedPieces = flipPieces(id, [...board], connections);\n    if (active === \"black\") {\n      changePieceOwnership(flippedPieces, setPlayer1, setPlayer2);\n      countCaptures(flippedPieces, setPlayer1);\n    } else {\n      changePieceOwnership(flippedPieces, setPlayer2, setPlayer1);\n      countCaptures(flippedPieces, setPlayer2);\n    }\n    const clearedBoard = clearPlayableMarkers([...board]);\n    setBoard(clearedBoard);\n    checkForGameOver(connections, playersWhoCantMove, setPlayersWhoCantMove);\n    changeTurn();\n  };\n\n  /* Game Logic */\n  const showPlayableSquaresForOnePiece = (board, piece, connections) => {\n    const opposingColor = piece.color === \"b\" ? \"w\" : \"b\";\n\n    //check all squares around for an adjacent opposingColor;\n    for (let offsetX = -1; offsetX <= 1; offsetX++) {\n      for (let offsetY = -1; offsetY <= 1; offsetY++) {\n        //skip the piece itself\n        if (offsetX === 0 && offsetY === 0) {\n          continue;\n        }\n        let currentX = piece.x + offsetX;\n        let currentY = piece.y + offsetY;\n\n        //if within board dimensions and next square contains opponent piece\n        if (\n          currentX < board.length &&\n          currentX >= 0 &&\n          currentY < board.length &&\n          currentY >= 0 &&\n          board[currentY][currentX].color === opposingColor\n        ) {\n          /*Add arrays of connected opponent pieces to an object with id of empty square at the end of the chain as the key.\n           */\n          gatherConnectionsOfOpponentPieces(\n            currentX,\n            currentY,\n            offsetX,\n            offsetY,\n            opposingColor,\n            connections,\n            board\n          );\n        }\n      }\n    }\n\n    return board;\n  };\n\n  const gatherConnectionsOfOpponentPieces = (\n    x,\n    y,\n    offsetX,\n    offsetY,\n    opposingColor,\n    connections,\n    board\n  ) => {\n    let chain = [];\n\n    //while within boundaries of the board\n    while (x < board.length && x >= 0 && y < board.length && y >= 0) {\n      const adjacentSquare = board[y][x];\n\n      if (adjacentSquare.color === opposingColor) {\n        chain.push(adjacentSquare);\n        //traverse in same direction if opponent square found\n        x += offsetX;\n        y += offsetY;\n      } else if (adjacentSquare.color === null) {\n        //put place marker on empty square by color\n        adjacentSquare.color = opposingColor === \"b\" ? \"pw\" : \"pb\";\n\n        connections[adjacentSquare.id] = chain;\n        return;\n      } else if (\n        adjacentSquare.color === \"pw\" ||\n        adjacentSquare.color === \"pb\"\n      ) {\n        //case where two chains lead to same empty square, add all pieces to the array at that key\n        connections[adjacentSquare.id] = [\n          ...connections[adjacentSquare.id],\n          ...chain,\n        ];\n        return;\n      }\n      //case where piece is same color as player piece\n      else {\n        return;\n      }\n    }\n  };\n  //replace marker(pw or pb) with right color of piece on click\n  const showNewPieceOnBoard = (id, board) => {\n    for (let row of board) {\n      for (let square of row) {\n        if (square.id === id) {\n          square.color = square.color === \"pb\" ? \"b\" : \"w\";\n          return square;\n        }\n      }\n    }\n  };\n\n  //helper function to remove an array of values from another array\n  const multiFilter = (remaining, valuesToRemove) => {\n    if (!valuesToRemove.length) {\n      return remaining;\n    }\n    const lastIndex = valuesToRemove.length - 1;\n    remaining = remaining.filter(\n      (item) => item.id !== valuesToRemove[lastIndex].id\n    );\n    valuesToRemove = valuesToRemove.slice(0, lastIndex);\n    return multiFilter(remaining, valuesToRemove);\n  };\n\n  const clearPlayableMarkers = (board) => {\n    for (let row of board) {\n      for (let square of row) {\n        if (square.color === \"pw\" || square.color === \"pb\") {\n          square.color = null;\n        }\n      }\n    }\n    return board;\n  };\n\n  const flipPieces = (id, board, connections) => {\n    //flip the color of the pieces where the id matches the key of the connections object\n    let piecesToFlip = connections[id];\n\n    for (let piece of piecesToFlip) {\n      changePieceColor(board, piece);\n    }\n    return piecesToFlip;\n  };\n\n  const changePieceColor = (board, piece) => {\n    board[piece.y][piece.x].color =\n      board[piece.y][piece.x].color === \"w\" ? \"b\" : \"w\";\n  };\n  \n  const countCaptures = (flippedPieces, activeSetter) => {\n    const numOfCaptures = flippedPieces.length;\n    activeSetter((prevPlayer) => ({\n      ...prevPlayer,\n      captures: [...prevPlayer.captures, numOfCaptures],\n    }));\n  };\n\n  const addPieceToPlayersPieces = (piece, setPlayerFn) => {\n    setPlayerFn((prevPlayer) => ({\n      ...prevPlayer,\n      pieces: [...prevPlayer.pieces, piece],\n    }));\n  };\n\n  const changePieceOwnership = (flippedPieces, activeSetter, passiveSetter) => {\n    //add pieces to the state of the player who clicked\n\n    activeSetter((prevPlayer) => ({\n      ...prevPlayer,\n      pieces: [...prevPlayer.pieces, ...flippedPieces],\n    }));\n\n    //take the same pieces away from the other player\n    passiveSetter((prevPlayer) => {\n      const remainingPieces = multiFilter(prevPlayer.pieces, flippedPieces);\n\n      return {\n        ...prevPlayer,\n        pieces: [...remainingPieces],\n      };\n    });\n  };\n\n  return [\n    board,\n    player1,\n    player2,\n    isGameStarted,\n    isGameOver,\n    blacksTurn,\n    handlePlacingPiece,\n    resetGame,\n    startGame,\n    showAllPlayableSquaresOnTurn,\n    alertMsg,\n  ];\n};\n","import React from \"react\";\nimport \"./PlayableSpace.css\";\n\nconst PlayableSpace = ({ id, color, handlePlacingPiece }) => {\n  return (\n    <div\n      class=\"playable-space\"\n      style={{ borderColor: color }}\n      onClick={() => handlePlacingPiece(id, color)}\n    ></div>\n  );\n};\n\nexport default PlayableSpace;\n","import React from \"react\";\nimport \"./Piece.css\";\nconst Piece = (props) => {\n  return <div class=\"piece\" style={{ backgroundColor: props.color }}></div>;\n};\n\nexport default Piece;\n","import React from \"react\"\nimport \"./Cell.css\"\nimport PlayableSpace from \"../PlayableSpace/PlayableSpace\"\nimport Piece from \"../Piece/Piece\"\n\nconst Cell = ({ id, color, handlePlacingPiece }) => {\n  const displayCellStatus = (color) => {\n    switch (color) {\n      case \"b\":\n        return <Piece color=\"black\" />\n      case \"w\":\n        return <Piece color=\"white\" />\n      case \"pw\":\n        return (\n          <PlayableSpace\n            handlePlacingPiece={ handlePlacingPiece }\n            id={ id }\n            color=\"white\"\n          />\n        )\n      case \"pb\":\n        return (\n          <PlayableSpace\n            handlePlacingPiece={ handlePlacingPiece }\n            id={ id }\n            color=\"black\"\n          />\n        )\n      default:\n        return null\n    }\n  }\n  return <div class=\"square\">{ displayCellStatus(color) }</div>\n}\n\nexport default Cell\n","import React from \"react\";\nimport \"./Row.css\";\nimport Cell from \"../Cell/Cell\";\n\nconst Row = ({ cellData, handlePlacingPiece }) => {\n  const generateCells = (cellData) => {\n    return cellData.map((cell) => {\n      return (\n        <Cell\n          key={cell.id}\n          id={cell.id}\n          x={cell.x}\n          y={cell.y}\n          color={cell.color}\n          handlePlacingPiece={handlePlacingPiece}\n        />\n      );\n    });\n  };\n  return <div class=\"row\">{generateCells(cellData)}</div>;\n};\n\nexport default Row;\n","import React from \"react\";\nimport Row from \"../Row/Row\";\nimport \"./Board.css\";\n\nconst Board = ({ board, handlePlacingPiece }) => {\n  const generateBoard = () => {\n    return board.map((row, index) => {\n      return (\n        <Row\n          key={index}\n          cellData={row}\n          handlePlacingPiece={handlePlacingPiece}\n        />\n      );\n    });\n  };\n  return <div id=\"board\">{generateBoard()}</div>;\n};\n\nexport default Board;\n","import React from 'react'\n\n\nimport './StartScreen.css'\nconst StartScreen = ({ timedGame, startGame, handleInputChange }) => {\n\n  return (\n    <div id=\"start-screen\">\n      <div id=\"container\">\n        <h1 id=\"game-title\">PLAY OTHELLO!!</h1>\n        <button id=\"start-button\" onClick={ startGame }>Start Game!</button>\n        <a\n          id=\"how-to\"\n          href=\"https://www.ultraboardgames.com/othello/game-rules.php\"\n          target=\"blank\"\n        >\n          how to play\n        </a>\n      </div>\n    </div>\n  )\n}\nexport default StartScreen\n","import React from \"react\";\nimport \"./ScoreBoard.css\";\n\nconst ScoreBoard = ({ blacksTurn, player1, player2, alertMsg }) => {\n  \n  const displayWhoseTurn = () => {\n    return blacksTurn ? \"Player1's Turn\" : \"Player2's Turn\";\n  };\n  return (\n    <>\n      <h3 id=\"alert\">{alertMsg}</h3>\n      <h2 id=\"status\">{displayWhoseTurn()}</h2>\n      <div id=\"scores-container\">\n        <div className=\"player-area\">\n          <h3 className=\"player-label\">P1</h3>\n          <div className=\"score-box\">\n            <div id=\"black-icon\"></div>\n            <span id=\"black-score\">{player1.pieces.length}</span>\n          </div>\n        </div>\n        <div className=\"player-area\">\n          <h3 className=\"player-label\">P2</h3>\n          <div className=\"score-box\">\n            <span id=\"white-icon\"></span>\n            <span id=\"white-score\">{player2.pieces.length}</span>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ScoreBoard;\n","import React from \"react\"\nimport \"./GameOver.css\"\nconst GameOver = ({ player1, player2, resetGame }) => {\n\n  //return how many pieces flipped on avg per turn per player\n  const calculateAvgCaptures = (player) => {\n    const captureSum = player.captures.reduce((a, b) => a + b)\n    const totalMoves = player.captures.length\n    //return avg up to 2 decimal places\n    return (captureSum / totalMoves).toFixed(2)\n  }\n\n  const findLargestCapture = (player) => {\n    const largestCapture = Math.max(...player.captures)\n    return largestCapture\n  }\n\n  const declareWinner = (player1, player2) => {\n    if (player1.pieces.length > player2.pieces.length) {\n      return `Player 1 Won!`\n    } else {\n      return `Player 2 Won!`\n    }\n  }\n\n  return (\n    <div id=\"gameover-screen\">\n      <h1>GAME OVER </h1>\n      <h2>{ declareWinner(player1, player2) }</h2>\n      <div className=\"player-area\">\n        <h3 className=\"player-label\">P1</h3>\n        <div className=\"score-box\">\n          <div id=\"black-icon\"></div>\n          <span id=\"black-score\">{ player1.pieces.length }</span>\n        </div>\n      </div>\n      <div className=\"player-area\">\n        <h3 className=\"player-label\">P2</h3>\n        <div className=\"score-box\">\n          <span id=\"white-icon\"></span>\n          <span id=\"white-score\">{ player2.pieces.length }</span>\n        </div>\n      </div>\n      <h3>Stats</h3>\n      <h4>Player1</h4>\n      <p className=\"stat\">Total moves: { player1.captures.length }</p>\n      <p className=\"stat\">\n        Average captures per move: { calculateAvgCaptures(player1) }\n      </p>\n      <p className=\"stat\">Largest capture: { findLargestCapture(player1) } </p>\n      <h4>Player2</h4>\n      <p className=\"stat\">Total moves: { player2.captures.length }</p>\n      <p className=\"stat\">\n        Average captures per move: { calculateAvgCaptures(player2) }\n      </p>\n      <p className=\"stat\">Largest capture: { findLargestCapture(player2) } </p>\n\n      <button id=\"play-again\" onClick={ () => resetGame() }>\n        Play Again?\n      </button>\n    </div>\n  )\n}\n\nexport default GameOver\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport StartScreen from \"../StartScreen/StartScreen\";\nimport ScoreBoard from \"../ScoreBoard/ScoreBoard\";\nimport GameOver from \"../GameOver/GameOver\";\nconst SideBar = ({\n  blacksTurn,\n  player1,\n  player2,\n  isGameStarted,\n  startGame,\n  isGameOver,\n  alertMsg,\n  resetGame,\n}) => {\n  const displaySideBarContent = (isGameStarted, isGameOver) => {\n    if (isGameOver) {\n      return (\n        <GameOver player1={player1} player2={player2} resetGame={resetGame} />\n      );\n    }\n    if (isGameStarted) {\n      return (\n        <ScoreBoard\n          blacksTurn={blacksTurn}\n          player1={player1}\n          player2={player2}\n          alertMsg={alertMsg}\n        />\n      );\n    } else {\n      return <StartScreen startGame={startGame} />;\n    }\n  };\n\n  return (\n    <div id=\"sidebar\">{displaySideBarContent(isGameStarted, isGameOver)}</div>\n  );\n};\n\nexport default SideBar;\n","import React, { useEffect } from \"react\";\nimport { useGameLogic } from \"../useGameLogic\";\n\n/* Components */\nimport Board from \"../Board/Board\";\nimport SideBar from \"../Sidebar/SideBar\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [\n    board,\n    player1,\n    player2,\n    isGameStarted,\n    isGameOver,\n    blacksTurn,\n    handlePlacingPiece,\n    resetGame,\n    startGame,\n    showAllPlayableSquaresOnTurn,\n    alertMsg,\n  ] = useGameLogic();\n\n  useEffect(() => {\n    if (isGameStarted) {\n      showAllPlayableSquaresOnTurn();\n    }\n    // eslint-disable-next-line\n  }, [blacksTurn, isGameStarted]);\n\n  return (\n    <div className=\"App\">\n      <SideBar\n        blacksTurn={blacksTurn}\n        player1={player1}\n        player2={player2}\n        isGameStarted={isGameStarted}\n        startGame={startGame}\n        isGameOver={isGameOver}\n        alertMsg={alertMsg}\n        resetGame={resetGame}\n      />\n      <Board board={board} handlePlacingPiece={handlePlacingPiece} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}